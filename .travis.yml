language: cpp
os: linux

sudo: required
dist: trusty   

addons:
    apt:
        sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-trusty-5.0
        packages:
            - g++-6
            - clang-5.0

env:
    - export COVERALLS_SERVICE_NAME=travis-ci
    - export COVERALLS_REPO_TOKEN=KQ14UwDkm2k8cbB4YZS61pL1GECbMPG2V

before_install:
    - ulimit -c
    - ulimit -a -S
    - ulimit -a -H
    - cat /proc/sys/kernel/core_pattern
    - cat /etc/default/apport
    - service --status-all || true
    - initctl list || true

    # Add and update Qt 5.10.1 Repository
    - sudo add-apt-repository --yes ppa:beineri/opt-qt-5.10.1-trusty
    - sudo apt-get update -qq

    - pip install --user cpp-coveralls

install:
    # Install Qt 5.10.1
    - sudo apt-get --yes install qt510base
    
script:
    # install mason
    - mkdir ./mason/
    - curl -sSfL https://github.com/mapbox/mason/archive/v0.2.0.tar.gz | tar --gunzip --extract --strip-components=1 --directory=./mason/
    # install gdb via mason
    - ./mason/mason install gdb 7.12
    # put GDB on PATH
    - export PATH=$(./mason/mason prefix gdb 7.12)/bin:${PATH}
    # install logbt
    - curl -sSfL https://github.com/mapbox/logbt/archive/v1.6.0.tar.gz | tar --gunzip --extract --strip-components=2 --exclude="*md" --exclude="test*" --directory=.
    - RESULT=0

    # Get the cmake version
    - which cmake
    - cmake --version

    # Setup Qt Variables
    - QTDIR="/opt/qt510"
    - PATH="$QTDIR/bin:$PATH"
    - source /opt/qt510/bin/qt510-env.sh

    # Execute cmake configuration
    - CXX=/usr/bin/g++-6 CC=/usr/bin/gcc-6 cmake -H. -Bbuild -DCOVERALLS=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_PREFIX_PATH=/opt/qt510/lib/cmake

    - cd build

    # Execute the build
    - cmake --build .

    # run tests
    - ./test/Editor/testEditorRun
    - sudo bash -c "echo '/tmp/logbt-coredumps/core.%p.%E' > /proc/sys/kernel/core_pattern"
    - ./test/Engine/testEngineRun  || RESULT=$?


     # Run the program to prompt a crash
     # Note: we capture the return code of the program here and add
     # `|| true` to ensure that travis continues past the crash
    #- CRASH_PLEASE=1 ./logbt ./test || RESULT=$?
     # For the purpose of this repo we assume the test will crash so let's
     # assert that the RESULT is 139 (exit code for a segfault)
     # For a real repo you would likely assert the RESULT is zero
   - if [[ ${RESULT} != 139 ]]; then echo "expected segfault and 139 exit but instead exited with ${RESULT}" && exit 1; fi;

after_success:
    - coveralls --root ../ -E".*CMakeFiles.*" -E".*build.*" -E"cmake" -E".*test.*"